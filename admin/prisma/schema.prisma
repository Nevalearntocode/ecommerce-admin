generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String
  hashedPassword String?
  store          Store[]
  staffs         Staff[]
  accounts       Account[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum StoreType {
  CLOTHING
  TECHNOLOGY
}

enum SizeValue {
  XS
  S
  M
  L
  XL
  XXL
}

model Store {
  id         Int         @id @default(autoincrement())
  slug       String      @unique
  name       String      @unique
  storeType  StoreType   @default(CLOTHING)
  inviteCode String      @unique @default(uuid())
  staffs     Staff[]
  Product    Product[]
  categories Category[]
  billboards Billboard[]
  sizes      Size[]
  colors     Color[]
  models     Model[]
  types      Type[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Size {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  value     SizeValue
  Store     Store     @relation(fields: [storeId], references: [id])
  storeId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@unique([name, storeId])
}

model Color {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  value     String
  Store     Store     @relation(fields: [storeId], references: [id])
  storeId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@unique([name, storeId])
}

model Model {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  value     String
  Store     Store     @relation(fields: [storeId], references: [id])
  storeId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@unique([name, storeId])
}

model Type {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  value     String
  Store     Store     @relation(fields: [storeId], references: [id])
  storeId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@unique([name, storeId])
}

model Staff {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  store              Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId            Int
  isAdmin            Boolean  @default(false)
  canManageStore     Boolean  @default(false)
  canManageCategory  Boolean  @default(false)
  canManageBillboard Boolean  @default(false)
  canManageProduct   Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, storeId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     Int
  billboard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Restrict)
  billboardId Int       @unique
  product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name, storeId])
  @@unique([slug, storeId])
}

model Billboard {
  id         Int        @id @default(autoincrement())
  name       String
  image      String
  categories Category[]
  storeId    Int
  store      Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([name, storeId])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  price       Float
  stock       Int
  images      String[]
  brand       String?
  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int
  size        Size?    @relation(fields: [sizeId], references: [id], onDelete: Restrict)
  sizeId      Int?
  color       Color?   @relation(fields: [colorId], references: [id], onDelete: Restrict)
  colorId     Int?
  model       Model?   @relation(fields: [modelId], references: [id], onDelete: Restrict)
  modelId     Int?
  type        Type?    @relation(fields: [typeId], references: [id], onDelete: Restrict)
  typeId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
