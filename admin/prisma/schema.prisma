// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String
  hashedPassword String?
  store          Store[]
  staffs         Staff[]
  accounts       Account[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum StoreType {
  CLOTHING
  TECHNOLOGY
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

model Store {
  id         Int         @id @default(autoincrement())
  slug       String      @unique
  name       String      @unique
  type       StoreType   @default(CLOTHING)
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[]
  billboards Billboard[]
  staffs     Staff[]
  inviteCode String      @unique @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Staff {
  id                 Int      @id @default(autoincrement())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId            Int
  store              Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  isAdmin            Boolean  @default(false)
  canManageStore     Boolean  @default(false)
  canManageCategory  Boolean  @default(false)
  canManageBillboard Boolean  @default(false)
  canManageProduct   Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, storeId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  storeId     Int
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  billboardId Int       @unique
  billboards  Billboard @relation(fields: [billboardId], references: [id], onDelete: Restrict)
  product     Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Billboard {
  id        Int        @id @default(autoincrement())
  name      String
  image     String
  category  Category[]
  storeId   Int
  store     Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  slug        String      @unique
  description String?
  price       Float
  stock       Int
  images      String[]
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  clothing    Clothing?
  technology  Technology?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Clothing {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @unique
  size      Size?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Technology {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @unique
  model     String?
  brand     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
